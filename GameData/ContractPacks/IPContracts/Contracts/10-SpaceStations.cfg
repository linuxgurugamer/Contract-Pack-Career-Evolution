// *************************** First Space Station

CONTRACT_TYPE
{
    
	name = FirstSpaceStation
    group = SpaceStations
	
    title = Launch your First Space Station
	agent = Experimental Engineering Group
	
	sortKey = 100
	
    notes = Launch your first space station into @targetBody orbit
    synopsis = Launch your first space station into @targetBody orbit
	
    description = Before we can continue to explore the far reaches of the solar system with our brave Kerbals, we need to learn more about the impact of living in space. Launch your first Space Station into orbit.
	
    completedMessage = Mission Success! The next step is to send a crew to the new station.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks4
	
    advanceFunds = @CareerEvolution:Kerbucks8
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MoonLanding-Crew
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = FirstSpaceStation
		type = VesselParameterGroup
		title = Put your first Space Station in Orbit
		notes = The station must include at least 1 Docking Port, Power Generation and support for 2 Crew
		define = SpaceStation
		defineList = firstSpaceStation
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Station
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		
		// Have Power Generation
		PARAMETER
		{
			name = PowerGeneration
			type = Any
			title = Have any type of Power Generation on your Station
			
			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				partModule = ModuleGenerator
				minCount = 1
				title = Have at least 1 RTG
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNFSolar
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
				title = Have at least 1 Curved Solar Panel
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFFission
				type = PartValidation
				partModule = FissionReactor
				minCount = 1
				title = Have at least 1 Fisson Reactor
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFRTG
				type = PartValidation
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
		}
		
		// Have Science Lab if StationScience NOT installed
		PARAMETER:NEEDS[!StationScience]
		{
			name = ScienceLab
			type = PartValidation
			title = Have at least one Science Lab on the station
			minCount = 1
			partModule = ModuleScienceLab
			hideChildren = true
		}
		
		// Have Science Lab if StationScience is installed
		PARAMETER:NEEDS[StationScience]
		{
			name = StationScienceSupport
			type = Any
			title = Have any type of Science Lab on your Station
			
			PARAMETER
			{
				name = ScienceLab
				type = PartValidation
				title = Have at least one Science Lab on the station
				minCount = 1
				partModule = ModuleScienceLab
				hideChildren = true
			}
			PARAMETER
			{
				name = StationScienceLab
				type = PartValidation
				title = Have at least one Research Facility on the station
				minCount = 1
				partModule = StationScienceModule
				hideChildren = true
			}
		}
		PARAMETER
		{
			name = Cupola
			type = PartValidation
			part = cupola
			title = Have a Cupola (optional)
			minCount = 1
			hideChildren = true
			optional = true
		}
		PARAMETER
		{
			name = SSOrbit
			type = Orbit
			minInclination = 0
			situation = ORBITING
			title = Put your space station into a stable orbit
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsStation
			type = VesselIsType
			vesselType = Station
			title = Set your vessel type to Station
		}
	}
}

// *************************** First Space Station Crew

CONTRACT_TYPE
{
    
	name = SSFirstCrew
    group = SpaceStations
	
    title = First Crew on your Space Station
	agent = Experimental Engineering Group
	
	sortKey = 101
	
    notes = Launch the first crew to @/targetVessel1
    synopsis = Launch the first crew to @/targetVessel1
	
    description = Now that our first space station is in orbit, we need to send our first crew to live there.
	
    completedMessage = Mission Success! Our first brave crew have started their mission on our space station. We will be watching them closely.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks5 / 1.25
	
    advanceFunds = @CareerEvolution:Kerbucks3 / 1.25
	
	prestige = Significant
	
	DATA
    {
        type = Vessel
	uniquenessCheck = GROUP_ALL
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody() == @targetBody).SelectUnique()
		title = Get your space station
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstSpaceStation
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = SSFirstCrew
		type = VesselParameterGroup
		title = Send your first crew to live on @/targetVessel1
		define = SSFirstCrew
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** Space Station Duration Record 3 Month

CONTRACT_TYPE
{
    
	name = SSThreeMonths
    group = SpaceStations
	
    title = Live for 90 Days in Space
	agent = Experimental Engineering Group
	
	sortKey = 102
	
    notes = Have 2 crew live for 90 days in space on @/targetVessel1
    synopsis = Have 2 crew live for 90 days in space on @/targetVessel1
	
    description = Management wants us to start exploring other planets with something a little more intelligent than robots. Before we can move on to these exciting new places, we need to prove we can live in space for an extended period of time.
	
    completedMessage = Mission Success! Our brave crew lived in space for more than 30 days. Let's see if they can live up there even longer!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks4
	
    advanceFunds = @CareerEvolution:Kerbucks4
	
	DATA
    {
        type = Vessel
		requiredValue = true
	uniquenessCheck = CONTRACT_ACTIVE

        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody() == @targetBody).SelectUnique()
		title = Get your space station
    }
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSFirstCrew
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = ThreeMonthsInSpace
		type = VesselParameterGroup
		title = Bring the new crew to @/targetVessel1 to live for 30 days
		define = ThreeMonthsInSpace
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = 30d
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting for 30 days
			completionText = Stay completed, you may return home now.
			disableOnStateChange = true
		}
	}
	
	PARAMETER
	{
		name = SSCrewRotationReturn
		type = VesselParameterGroup
		title = Bring your first crew home from @/targetVessel1
		define = SSFirstCrewReturn
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}		
	}
}

// *************************** Space Station Duration Record 6 Month

CONTRACT_TYPE
{
    
	name = SSSixMonths
    group = SpaceStations
	
    title = Live for 180 Days in Space
	agent = Experimental Engineering Group
	
	sortKey = 103
	
    notes = Have 2 crew live for 180 days in space on @/targetVessel1
    synopsis = Have 2 crew live for 180 days in space on @/targetVessel1
	
    description = Management wants us to start exploring other planets with something a little more intelligent than robots. Before we can move on to these exciting new places, we need to prove we can live in space for an extended period of time. We have already lived in space for three months, let's double that!
	
    completedMessage = Mission Success! Our brave crew lived in space for more than six months! Can we last a full year?
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks5
	
    advanceFunds = @CareerEvolution:Kerbucks5
	
	DATA
    {
        type = Vessel
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody() == @targetBody).SelectUnique()
	uniquenessCheck = CONTRACT_ACTIVE

		title = Get your space station
    }
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSThreeMonths
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = SixMonthsInSpace
		type = VesselParameterGroup
		title = Bring the new crew to @/targetVessel1 to live for 180 days
		define = ThreeMonthsInSpace
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = 180d
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting for 180 days
			completionText = Stay completed, you may return home now.
			disableOnStateChange = true
		}
	}
	
	PARAMETER
	{
		name = SSCrewRotationReturn
		type = VesselParameterGroup
		title = Bring your brave crew home from @/targetVessel1
		define = SSCrewReturn
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}		
	}
}

// *************************** Space Station Duration One Year

CONTRACT_TYPE
{
    
	name = SSOneYear
    group = SpaceStations
	
    title = Live for One Year in Space
	agent = Experimental Engineering Group
	
	sortKey = 104
	
    notes = Have 2 crew live for one year in space on @/targetVessel1
    synopsis = Have 2 crew live for one year in space on @/targetVessel1
	
    description = Management wants us to start exploring other planets with something a little more intelligent than robots. Before we can move on to these exciting new places, we need to prove we can live in space for an extended period of time. We have already lived in space for six months, time to shoot for one year!
	
    completedMessage = Mission Success! Our brave crew lived in space for a full year. We are ready to send our brave explorers out into the far reaches of our solar system.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks10
	
    advanceFunds = @CareerEvolution:Kerbucks6
	
	DATA
    {
        type = Vessel
		requiredValue = true
        targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody() == @targetBody).SelectUnique()
	uniquenessCheck = CONTRACT_ACTIVE

		title = Get your space station
    }
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSSixMonths
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = OneYearInSpace
		type = VesselParameterGroup
		title = Bring the new crew to @/targetVessel1 to live for One Year
		define = OneYearInSpace
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = 1y
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting for One Year
			completionText = Stay completed, you may return home now.
			disableOnStateChange = true
		}
	}
	
	PARAMETER
	{
		name = SSCrewRotationReturn
		type = VesselParameterGroup
		title = Bring your brave crew home from @/targetVessel1
		define = SSCrewReturn
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}		
	}
}

// *************************** Space Station Crew Rotation

CONTRACT_TYPE
{
    
	name = SSCrewRotation
    group = SpaceStations
	
    title = Rotate the Crew of @/targetVessel1
	genericTitle = Rotate the Crew of Your Space Station
	agent = Experimental Engineering Group
	
	sortKey = 105
	
    notes = Rotate the Crew of @/targetVessel1
    synopsis = Rotate the Crew of @/targetVessel1
	
    description = Our crew has been up on the Space Station for a extended stay. We need to continue our research, so we want to send another crew up as well.
	
    completedMessage = Mission Success! Our new crew has settled into the station and will continue our research.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 1
    rewardReputation = 5
    rewardFunds = @/targetVessel1.CrewCount() > 4 ? @/targetVessel1.CrewCount()*10000 : Random(40000, 60000.0)
	
    failureReputation = Random(1, 5.0)
    failureFunds = Random(1, 10000.0)
    advanceFunds = Random(1, 10000.0)
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = CONTRACT_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()

		title = Must have a station with crew on board
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
		title = Get the target body
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
		title = Get your list of Kerbals to return
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSOneYear
		title = Complete @contractType Contract
	}
	
	// After a Crew Rotation, wait this long for another
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		minCount = 0
		contractType = SSCrewRotation
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous Crew Rotation contract
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
		name = StationCheck
		type = Expression
		expression = (@/targetVessel1.IsOrbiting())
		title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = SSCrewRotation
		type = VesselParameterGroup
		title = Send up a New Crew
		
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = Random(1, 4)
			title = Have at least @minCrew crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}		
	}
	
	PARAMETER
	{
		name = SSCrewReturn
		type = VesselParameterGroup
		title = Bring the crew home!
		define = SSCrewReturn
		
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome
			targetBody = HomeWorld()
			title = Return Crew Home Safely
			hideChildren = true
			completeInSequence = true
		}
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
		
	}
}

// *************************** Space Station Core

CONTRACT_TYPE
{
    
	name = SpaceStation
    group = SpaceStations
	
    title = Launch the @/targetBody1 Space Station!
	genericTitle = Launch a new Space Station!
	agent = Experimental Engineering Group
	
	sortKey = 106
	
    notes = Launch the @/targetBody1 Space Station into orbit
    synopsis = Launch the @/targetBody1 Space Station into orbit
	
    description = It is time for a new space station. You can choose to launch it in one massive launch, or you can build it in orbit, it is up to you!
	
    completedMessage = Mission Success! Your station is fully constructed!
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 1
    rewardReputation = Random(1.0, 10.0)
    rewardFunds = @CareerEvolution:Kerbucks10
    failureReputation = 5
    failureFunds = @CareerEvolution:Kerbucks10
    advanceFunds = @CareerEvolution:Kerbucks10
	
	// Failsafe Data
    DATA
    {
        type = List<Vessel>
		requiredValue = false
        stations = AllVessels().Where(v => v.VesselType() == Station)
		title = Find the stations
    }
	
	// Find a body that we have returned from that does not have a space station
    DATA
    {
        type = CelestialBody
        requiredValue = false
        uniquenessCheck = CONTRACT_ACTIVE
        targetBody1 = ReturnedFromBodies().Where(body => @/stations.Where(v => v.CelestialBody() == body).Count() == 0).SelectUnique()
		title = Must have returned from a Celestial Body, but not have any stations deployed.
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSOneYear
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = NewSpaceStation
		type = VesselParameterGroup
		title = Launch your new space station into orbit around @/targetBody1
		notes = The station must include at least 1 Docking Port, Power Generation, support for at least 2 crew, MonoPropellant and Electric Storage
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Station
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		
		// Have Power Generation
		PARAMETER
		{
			name = PowerGeneration
			type = Any
			title = Have any type of Power Generation on your Station
			
			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				partModule = ModuleGenerator
				minCount = 1
				title = Have at least 1 RTG
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNFSolar
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
				title = Have at least 1 Curved Solar Panel
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFFission
				type = PartValidation
				partModule = FissionReactor
				minCount = 1
				title = Have at least 1 Fisson Reactor
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFRTG
				type = PartValidation
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
		}
		
		// Have Science Lab if StationScience NOT installed
		PARAMETER:NEEDS[!StationScience]
		{
			name = ScienceLab
			type = PartValidation
			title = Have at least one Science Lab on the station
			minCount = 1
			partModule = ModuleScienceLab
			hideChildren = true
		}
		
		// Have Science Lab if StationScience is installed
		PARAMETER:NEEDS[StationScience]
		{
			name = StationScienceSupport
			type = Any
			title = Have any type of Science Lab on your Station
			
			PARAMETER
			{
				name = ScienceLab
				type = PartValidation
				title = Have at least one Science Lab on the station
				minCount = 1
				partModule = ModuleScienceLab
				hideChildren = true
			}
			PARAMETER
			{
				name = StationScienceLab
				type = PartValidation
				title = Have at least one Research Facility on the station
				minCount = 1
				partModule = StationScienceModule
				hideChildren = true
			}
		}
		PARAMETER
		{
			name = HasBatteryCapacity
			type = HasResourceCapacity
			resource = ElectricCharge
			minQuantity = Round(Random(1000.0, 10000.0))
			title = Have capacity for at least @minQuantity Electric Charge
			hideChildren = true
		}		
		PARAMETER
		{
			name = HasMonoProp
			type = HasResourceCapacity
			resource = MonoPropellant
			minQuantity = Round(Random(500.0, 5000.0))
			title = Have capacity for at least @minQuantity MonoPropellant Fuel (don't forget to include some RCS thrusters to make sure you can move the station)
			hideChildren = true
		}
		PARAMETER
		{
			name = Cupola
			type = PartValidation
			part = cupola
			title = Have a Cupola (optional)
			minCount = 1
			hideChildren = true
			optional = true
		}
		PARAMETER
		{
			name = SSOrbit
			type = Orbit
			situation = ORBITING
			maxAltitude = @/targetBody1.SpaceAltitudeThreshold()
			title = Put your space station into a stable orbit
		}
		PARAMETER
		{
			name = VesselIsStation
			type = VesselIsType
			vesselType = Station
			title = Set your vessel type to Station
		}
	}
}

// *************************** Space Station Deorbit

CONTRACT_TYPE
{
    
	name = SSDeorbit
    group = SpaceStations
	
    title = Deorbit Space Station
	agent = Experimental Engineering Group
	
	sortKey = 107
	
    notes = It appears that @/targetVessel1 has reached the end of its life, return the crew and deorbit the station
    synopsis = It appears that @/targetVessel1 has reached the end of its life, return the crew and deorbit the station.
	
    description = Our space station was a great success and brought us new information about living in space. Alas, all good things must come to an end and it is time to safely deorbit the space station. Return the crew home and deorbit the station, destroying it in the process.
	
    completedMessage = Mission Success! You will always remember your Space Station, just like your ex-lover. But, as is true for both, neither was as good looking as you remember.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks2
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()>0).SelectUnique()
		title = Must have a station with crew on board
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSOneYear
		title = Complete @contractType Contract
	}
	
	// After a Crew Rotation, wait this long for another
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		minCount = 0
		contractType = SSDeorbit
		cooldownDuration = 180d
		title = Wait at least 6 months after completing a previous Space Station Deorbit
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 9
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = SSCrewReturn
		type = VesselParameterGroup
		title = Bring your crew home from @/targetVessel1
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
	}
	
	PARAMETER
	{
		name = DeorbitSpaceStation
		type = VesselDestroyed
		title = Deorbit and Destroy your Space Station
		completeInSequence = true
	}
}

// *************************** Space Station Extra Crew Capacity

CONTRACT_TYPE
{
    
	name = SSAddMoreCrew
    group = SpaceStations
	
    title = Add More Crew Capacity to @/targetVessel1
	genericTitle = Add More Crew Capacity to your Station
	agent = Experimental Engineering Group
	
	sortKey = 108
	
    notes = Add more crew capacity to @/targetVessel1
    synopsis = Add more crew capacity to @/targetVessel1
	
    description = Our space station has gotten a little cramped and we want to be able to send more crew. Send a module with more living space for your crew.
	
    completedMessage = Mission Success! @/targetVessel1 has more living space and has room for more crew!
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 2
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 2
    rewardFunds = Random(20000.0, 80000.0)
    failureReputation = 2
    failureFunds = 20000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.EmptyCrewSpace()<3 && v.FreeDockingPorts()>0).SelectUnique()
		title = Must have a station with less than 3 empty seats
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSOneYear
		title = Complete @contractType Contract
	}
	
	// After a Crew Capacity Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSAddMoreCrew
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = AddCrewCapacity
		type = VesselParameterGroup
		title = Increase the Crew Capacity on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 3
			title = Launch a new module with space for at least 3 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}

// *************************** Space Station New Fuel Module

CONTRACT_TYPE
{
    
	name = SSAddMoreFuel
    group = SpaceStations
	
    title = Add a Fuel Module to @/targetVessel1
	genericTitle = Add a Fuel Module to your Station
	agent = Experimental Engineering Group
	
	sortKey = 109
	
    notes = Add a fuel module to @/targetVessel1
    synopsis = Add a fuel module to @/targetVessel1
	
    description = Our scientists and engineers have told us that by refueling our ships once they are already in orbit will allow us to travel further into the solar system. Send a fuel module to your space station to create a fueling station.
	
    completedMessage = Mission Success! @/targetVessel1 has more a new fuel module and can provide important logistics for our space program.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 2
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 1
    rewardFunds = Random(10000.0, 60000.0)
    failureReputation = 1
    failureFunds = 10000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && v.ResourceCapacity(LiquidFuel)<2880 && v.ResourceCapacity(Oxidizer)<3520).SelectUnique()
		title = Must have an open Docking Port and have less LFO capacity than a Jumbo Tank
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSThreeMonths
		title = Complete @contractType Contract
	}
	
	// After a Fuel Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSAddMoreFuel
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = AddFuelCapacity
		type = VesselParameterGroup
		title = Increase the LFO Capacity on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = AllResources
			type = All
			title = Launch a new module with at least 2880 units of Liquid Fuel, 3520 units of Oxidizer and at least 1 docking port.
			notes = This is the amount of LFO in the Jumbo Orange Fuel Tank
			hideChildren = true
			
			PARAMETER
			{
				name = HasFuel
				type = HasResource
				resource = LiquidFuel
				minQuantity = 2880.0
				title = Launch a new module with at least 2880 units of Liquid Fuel
				hideChildren = true
			}
			PARAMETER
			{
				name = HasOxidizer
				type = HasResource
				resource = Oxidizer
				minQuantity = 3520.0
				title = Launch a new module with at least 3520 units of Oxidizer
				hideChildren = true
			}
			PARAMETER
			{
				name = DockingPort
				type = PartValidation
				partModule = ModuleDockingNode
				minCount = 1
				title = Have at least 1 Docking Ports
				hideChildren = true
			}
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}

// *************************** Space Station New Power Module

CONTRACT_TYPE
{
    
	name = SSAddMorePower
    group = SpaceStations
	
    title = Add a Power Module to @/targetVessel1
	genericTitle = Add a Power Module to your Station
	agent = Experimental Engineering Group
	
	sortKey = 110
	
    notes = Add a power module to @/targetVessel1
    synopsis = Add a power module to @/targetVessel1
	
    description = The power production on your space station is making our engineers nervous. Apparently, they would be happy if we added more power generation to the station.
	
    completedMessage = Mission Success! @/targetVessel1 is now generating more power. This should make our engineers happy...but we'll see for how long.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 2
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 1
    rewardFunds = Random(10000.0, 60000.0)
    failureReputation = 1
    failureFunds = 10000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0).SelectUnique()
		title = Must have an open Docking Port
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSThreeMonths
		title = Complete @contractType Contract
	}
	
	// After a Fuel Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSAddMorePower
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = AddFuelCapacity
		type = VesselParameterGroup
		title = Increase the Power Generation on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = PowerGeneration
			type = Any
			title = Launch a new Power Generation Module
			
			PARAMETER
			{
				name = PartValidationSolar
				type = PartValidation
				partModule = ModuleDeployableSolarPanel
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
			PARAMETER
			{
				name = PartValidationRTG
				type = PartValidation
				partModule = ModuleGenerator
				minCount = 1
				title = Have at least 1 RTG
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureSolar]
			{
				name = PartValidationNFSolar
				type = PartValidation
				partModule = ModuleCurvedSolarPanel
				minCount = 1
				title = Have at least 1 Curved Solar Panel
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFFission
				type = PartValidation
				partModule = FissionReactor
				minCount = 1
				title = Have at least 1 Fisson Reactor
				hideChildren = true
			}
			PARAMETER:NEEDS[NearFutureElectrical]
			{
				name = PartValidationNFRTG
				type = PartValidation
				partModule = ModuleRadioisotopeGenerator
				minCount = 1
				title = Have at least 1 Solar Panel
				hideChildren = true
			}
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}

// *************************** Space Station Resupply LFO

CONTRACT_TYPE
{
    
	name = SSResupplyFuel
    group = SpaceStations
	
    title = Resupply the LFO on @/targetVessel1
	genericTitle = Resupply the LFO on your Space Station
	agent = Experimental Engineering Group
	
	sortKey = 111
	
    notes = Send a mission to resupply the LFO on @/targetVessel1
    synopsis = Send a mission to resupply the LFO on @/targetVessel1
	
    description = Our Liquid Fuel and Oxidizer supply is dangerously low on our station and we need to send a resupply mission.
	
    completedMessage = Mission Success! You have resupplied @/targetVessel1 with enough LFO to continue our operations.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 2
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 1
    rewardFunds = Random(10000.0, 60000.0)
    failureReputation = 1
    failureFunds = 10000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && (v.ResourceCapacity(LiquidFuel) / v.ResourceQuantity(LiquidFuel))>0.11).SelectUnique()
		title = Must have an open Docking Port and 10% or less of fuel
	}
	DATA
	{
		type = int
		fuelSpace = Round(@/targetVessel1.ResourceCapacity(LiquidFuel) - @/targetVessel1.ResourceQuantity(LiquidFuel))
		oxidizerSpace = Round(@/targetVessel1.ResourceCapacity(Oxidizer) - @/targetVessel1.ResourceQuantity(Oxidizer))
		title = Get empty space for LFO
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSThreeMonths
		title = Complete @contractType Contract
	}
	
	// After a Fuel Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSResupplyFuel
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = ResupplyFuel
		type = VesselParameterGroup
		title = Increase the LFO Amount on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = AllResources
			type = All
			title = Launch a new module with at least @/fuelSpace units of Liquid Fuel, @/oxidizerSpace units of Oxidizer and at least 1 docking port.
			notes = This is the amount of LFO that would fill the station up
			hideChildren = true
			
			PARAMETER
			{
				name = HasFuel
				type = HasResource
				resource = LiquidFuel
				minQuantity = @/fuelSpace
				title = Launch a new module with at least @/fuelSpace units of Liquid Fuel
				hideChildren = true
			}
			PARAMETER
			{
				name = HasOxidizer
				type = HasResource
				resource = Oxidizer
				minQuantity = @/oxidizerSpace
				title = Launch a new module with at least 3520 units of Oxidizer
				hideChildren = true
			}
			PARAMETER
			{
				name = DockingPort
				type = PartValidation
				partModule = ModuleDockingNode
				minCount = 1
				title = Have at least 1 Docking Ports
				hideChildren = true
			}
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}

// *************************** Space Station Resupply MonoProp

CONTRACT_TYPE
{
    
	name = SSResupplyMP
    group = SpaceStations
	
    title = Resupply the Mono Propellant on @/targetVessel1
	genericTitle = Resupply the Mono Propellant on your Space Station
	agent = Experimental Engineering Group
	
	sortKey = 112
	
    notes = Send a mission to resupply the Mono Propellant on @/targetVessel1
    synopsis = Send a mission to resupply the Mono Propellant on @/targetVessel1
	
    description = Our Mono Propellant supply is dangerously low on our station and we need to send a resupply mission.
	
    completedMessage = Mission Success! You have resupplied @/targetVessel1 with enough Mono Propellant to continue our operations.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 2
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = 1
    rewardFunds = Random(10000.0, 60000.0)
    failureReputation = 1
    failureFunds = 10000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.FreeDockingPorts()>0 && (v.ResourceCapacity(MonoPropellant) / v.ResourceQuantity(MonoPropellant))>0.11).SelectUnique()
		title = Must have an open Docking Port and 10% or less of MP
	}
	DATA
	{
		type = int
		monoSpace = Round(@/targetVessel1.ResourceCapacity(MonoPropellant) - @/targetVessel1.ResourceQuantity(MonoPropellant))
		title = Get empty space for MP
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSThreeMonths
		title = Complete @contractType Contract
	}
	
	// After a Fuel Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSResupplyMP
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll > 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = ResupplyMP
		type = VesselParameterGroup
		title = Increase the Mono Propellant Amount on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasFuel
			type = HasResource
			resource = MonoPropellant
			minQuantity = @/monoSpace
			title = Launch a new module with at least @/monoSpace units of Mono Propellant
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}

// *************************** Space Station New Crew

CONTRACT_TYPE
{
    
	name = SSNewCrew
    group = SpaceStations
	
    title = Send a new crew to @/targetVessel1
	genericTitle = Send a New Crew to your Station
	agent = Experimental Engineering Group
	
	sortKey = 113
	
    notes = Send a new crew to @/targetVessel1
    synopsis = Send a new crew to @/targetVessel1
	
    description = Through some fault of, well, yours, there is a station that is in orbit without any crew. Send a new crew to your space station.
	
    completedMessage = Mission Success! The new crew is now living on @/targetVessel1 at least until we invent some new emergency.
	
    minExpiry = 1
    maxExpiry = 7
    maxCompletions = 0
	maxSimultaneous = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @/targetBody1
    
	// REWARDS
    rewardScience = 0
    rewardReputation = Random(5.0, 20.0)
    rewardFunds = Random(5000.0, 20000.0)
    failureReputation = Random(5.0, 20.0)
    failureFunds = 20000.0
    advanceFunds = 10000.0
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.CrewCount()<1 && v.FreeDockingPorts()>0).SelectUnique()
		title = Must have a station with no crew
	}
	DATA
	{
		type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
	}
	
DATA
	{
		type = int
		requiredValue = true
		targetCapacity = Max(@/targetVessel1.CrewCapacity(), 2)
		hidden = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SpaceStation
		title = Complete @contractType Contract
	}
	
	// After a Crew Capacity Increase, wait this long for another
	REQUIREMENT
	{
		name = CompleteContractDelay
		type = CompleteContract
		minCount = 0
		contractType = SSNewCrew
		cooldownDuration = 20d
		title = Wait at least 20 days after completing a previous mission
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CareerEvolution:randomRoll < 5
		title = The RNG must like you
	}
	
	REQUIREMENT
	{
	name = StationCheck
	type = Expression
	expression = (@/targetVessel1.IsOrbiting())
	title = The station should be in orbit.
	}
	
	PARAMETER
	{
		name = AddNewCrew
		type = VesselParameterGroup
		title = Increase the Crew Capacity on @/targetVessel1
		disableOnStateChange = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			minCrew = 2
			maxCrew = @/targetCapacity
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModule = ModuleDockingNode
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
	}
	
	PARAMETER
	{
		name = DockWithStation
		type = Docking
		vessel = @/targetVessel1
		title = Dock @/targetVessel1
		hideChildren = true
		disableOnStateChange = true
	}
}
